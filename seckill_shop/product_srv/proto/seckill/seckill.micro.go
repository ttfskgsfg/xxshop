// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: seckill.proto

/*
Package zhiliao_product_srv is a generated protocol buffer package.

It is generated from these files:
	seckill.proto

It has these top-level messages:
	FrontSecKillRequest
	FrongSecKillDetailResponse
	FrontSecKillResponse
	SecKillToEditResponse
	SecKillDelRequest
	SecKillResponse
	ProductRequest
	ProductResponse
	Product
	SecKillsRequest
	SecKillsResponse
	SecKill
*/
package zhiliao_product_srv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SecKills service

type SecKillsService interface {
	SecKillList(ctx context.Context, in *SecKillsRequest, opts ...client.CallOption) (*SecKillsResponse, error)
	GetProducts(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*ProductResponse, error)
	SecKillAdd(ctx context.Context, in *SecKill, opts ...client.CallOption) (*SecKillResponse, error)
	SecKillDel(ctx context.Context, in *SecKillDelRequest, opts ...client.CallOption) (*SecKillResponse, error)
	SecKillToEdit(ctx context.Context, in *SecKillDelRequest, opts ...client.CallOption) (*SecKillToEditResponse, error)
	SecKillDoEdit(ctx context.Context, in *SecKill, opts ...client.CallOption) (*SecKillResponse, error)
	FrontSecKillList(ctx context.Context, in *FrontSecKillRequest, opts ...client.CallOption) (*FrontSecKillResponse, error)
	FrontSecKillDetail(ctx context.Context, in *SecKillDelRequest, opts ...client.CallOption) (*FrongSecKillDetailResponse, error)
}

type secKillsService struct {
	c    client.Client
	name string
}

func NewSecKillsService(name string, c client.Client) SecKillsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "zhiliao_product_srv"
	}
	return &secKillsService{
		c:    c,
		name: name,
	}
}

func (c *secKillsService) SecKillList(ctx context.Context, in *SecKillsRequest, opts ...client.CallOption) (*SecKillsResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillList", in)
	out := new(SecKillsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) GetProducts(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*ProductResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.GetProducts", in)
	out := new(ProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillAdd(ctx context.Context, in *SecKill, opts ...client.CallOption) (*SecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillAdd", in)
	out := new(SecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillDel(ctx context.Context, in *SecKillDelRequest, opts ...client.CallOption) (*SecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillDel", in)
	out := new(SecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillToEdit(ctx context.Context, in *SecKillDelRequest, opts ...client.CallOption) (*SecKillToEditResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillToEdit", in)
	out := new(SecKillToEditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) SecKillDoEdit(ctx context.Context, in *SecKill, opts ...client.CallOption) (*SecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.SecKillDoEdit", in)
	out := new(SecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) FrontSecKillList(ctx context.Context, in *FrontSecKillRequest, opts ...client.CallOption) (*FrontSecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.FrontSecKillList", in)
	out := new(FrontSecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secKillsService) FrontSecKillDetail(ctx context.Context, in *SecKillDelRequest, opts ...client.CallOption) (*FrongSecKillDetailResponse, error) {
	req := c.c.NewRequest(c.name, "SecKills.FrontSecKillDetail", in)
	out := new(FrongSecKillDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecKills service

type SecKillsHandler interface {
	SecKillList(context.Context, *SecKillsRequest, *SecKillsResponse) error
	GetProducts(context.Context, *ProductRequest, *ProductResponse) error
	SecKillAdd(context.Context, *SecKill, *SecKillResponse) error
	SecKillDel(context.Context, *SecKillDelRequest, *SecKillResponse) error
	SecKillToEdit(context.Context, *SecKillDelRequest, *SecKillToEditResponse) error
	SecKillDoEdit(context.Context, *SecKill, *SecKillResponse) error
	FrontSecKillList(context.Context, *FrontSecKillRequest, *FrontSecKillResponse) error
	FrontSecKillDetail(context.Context, *SecKillDelRequest, *FrongSecKillDetailResponse) error
}

func RegisterSecKillsHandler(s server.Server, hdlr SecKillsHandler, opts ...server.HandlerOption) error {
	type secKills interface {
		SecKillList(ctx context.Context, in *SecKillsRequest, out *SecKillsResponse) error
		GetProducts(ctx context.Context, in *ProductRequest, out *ProductResponse) error
		SecKillAdd(ctx context.Context, in *SecKill, out *SecKillResponse) error
		SecKillDel(ctx context.Context, in *SecKillDelRequest, out *SecKillResponse) error
		SecKillToEdit(ctx context.Context, in *SecKillDelRequest, out *SecKillToEditResponse) error
		SecKillDoEdit(ctx context.Context, in *SecKill, out *SecKillResponse) error
		FrontSecKillList(ctx context.Context, in *FrontSecKillRequest, out *FrontSecKillResponse) error
		FrontSecKillDetail(ctx context.Context, in *SecKillDelRequest, out *FrongSecKillDetailResponse) error
	}
	type SecKills struct {
		secKills
	}
	h := &secKillsHandler{hdlr}
	return s.Handle(s.NewHandler(&SecKills{h}, opts...))
}

type secKillsHandler struct {
	SecKillsHandler
}

func (h *secKillsHandler) SecKillList(ctx context.Context, in *SecKillsRequest, out *SecKillsResponse) error {
	return h.SecKillsHandler.SecKillList(ctx, in, out)
}

func (h *secKillsHandler) GetProducts(ctx context.Context, in *ProductRequest, out *ProductResponse) error {
	return h.SecKillsHandler.GetProducts(ctx, in, out)
}

func (h *secKillsHandler) SecKillAdd(ctx context.Context, in *SecKill, out *SecKillResponse) error {
	return h.SecKillsHandler.SecKillAdd(ctx, in, out)
}

func (h *secKillsHandler) SecKillDel(ctx context.Context, in *SecKillDelRequest, out *SecKillResponse) error {
	return h.SecKillsHandler.SecKillDel(ctx, in, out)
}

func (h *secKillsHandler) SecKillToEdit(ctx context.Context, in *SecKillDelRequest, out *SecKillToEditResponse) error {
	return h.SecKillsHandler.SecKillToEdit(ctx, in, out)
}

func (h *secKillsHandler) SecKillDoEdit(ctx context.Context, in *SecKill, out *SecKillResponse) error {
	return h.SecKillsHandler.SecKillDoEdit(ctx, in, out)
}

func (h *secKillsHandler) FrontSecKillList(ctx context.Context, in *FrontSecKillRequest, out *FrontSecKillResponse) error {
	return h.SecKillsHandler.FrontSecKillList(ctx, in, out)
}

func (h *secKillsHandler) FrontSecKillDetail(ctx context.Context, in *SecKillDelRequest, out *FrongSecKillDetailResponse) error {
	return h.SecKillsHandler.FrontSecKillDetail(ctx, in, out)
}
